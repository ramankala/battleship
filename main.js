(()=>{"use strict";const e=e=>{const t=[];return{ship:t,length:e,hit:e=>t[e]="hit",isSunk:()=>{let r=0,o=!1;return t.forEach((function(e){"hit"===e&&(r+=1)})),o=r===e,o}}},t=(t,r=!1)=>{let o=e(5),i=e(4),l=e(3),a=e(3),n=e(2),d={name:t,isActive:r};return{get name(){return d.name},get isActive(){return d.isActive},toggle(){d.isActive=!d.isActive},board:(()=>{let e=[["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""]];for(let t=0;t<10;t++)for(let r=0;r<10;r++)e[t][r]={hasShip:!1,isShot:!1,shipLength:0,shipType:"n/a",xPoint:0,yPoint:0};return{gameBoard:e,placeHorizontal:(t,r,o,i)=>{for(let l=0;l<o;l++)e[t][r].hasShip=!0,e[t][r].shipLength=o,e[t][r].shipType=i,e[t][r].xPoint=t,e[t][r].yPoint=r,r+=1;return e},placeVert:(t,r,o,i)=>{for(let l=0;l<o;l++)e[t][r].hasShip=!0,e[t][r].shipLength=o,e[t][r].shipType=i,e[t][r].xPoint=t,e[t][r].yPoint=r,t+=1;return e},receiveAttack:(t,r)=>!0===e[t][r].hasShip?(e[t][r].isShot=!0,"Hit"):(e[t][r].isShot=!0,e),allShipsSunk:e=>e.filter((e=>e.isSunk())).length===e.length,scout:(t,r,o,i)=>{let l=!1;if("row"===i)for(let i=0;i<o;i++)!0===e[t][r].hasShip&&(l=!0),r+=1;else for(let i=0;i<o;i++)!0===e[t][r].hasShip&&(l=!0),t+=1;return l}}})(),ships:[o,i,l,a,n],enemyMove:()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())]}},r=(e,t)=>{let r=document.querySelector(`#container${t}`),o=document.createElement("div");o.setAttribute("id","row1");let i=document.createElement("div");i.setAttribute("id","row2");let l=document.createElement("div");l.setAttribute("id","row3");let a=document.createElement("div");a.setAttribute("id","row4");let n=document.createElement("div");n.setAttribute("id","row5");let d=document.createElement("div");d.setAttribute("id","row6");let s=document.createElement("div");s.setAttribute("id","row7");let c=document.createElement("div");c.setAttribute("id","row8");let u=document.createElement("div");u.setAttribute("id","row9");let g=document.createElement("div");g.setAttribute("id","row10"),e.forEach((function(e,h){e.forEach((function(e,p){let m=document.createElement("div");m.setAttribute("id",`squareDiv${h}${p}`),m.setAttribute("data-y-coord",p),m.setAttribute("data-x-coord",h),m.setAttribute("data-has-ship",e.hasShip),m.setAttribute("data-is-shot",e.isShot),m.classList.add(`atkDiv${t}`),m.textContent=e.hasShip;for(let e=0;e<10;e++)m.getAttribute("id")==`squareDiv0${e}`?o.appendChild(m):m.getAttribute("id")==`squareDiv1${e}`?i.appendChild(m):m.getAttribute("id")==`squareDiv2${e}`?l.appendChild(m):m.getAttribute("id")==`squareDiv3${e}`?a.appendChild(m):m.getAttribute("id")==`squareDiv4${e}`?n.appendChild(m):m.getAttribute("id")==`squareDiv5${e}`?d.appendChild(m):m.getAttribute("id")==`squareDiv6${e}`?s.appendChild(m):m.getAttribute("id")==`squareDiv7${e}`?c.appendChild(m):m.getAttribute("id")==`squareDiv8${e}`?u.appendChild(m):m.getAttribute("id")==`squareDiv9${e}`&&g.appendChild(m);r.appendChild(o),r.appendChild(i),r.appendChild(l),r.appendChild(a),r.appendChild(n),r.appendChild(d),r.appendChild(s),r.appendChild(c),r.appendChild(u),r.appendChild(g)}))}))},o=(e,t,r)=>{let o,l,a,n,d,s=t.board,c=t.ships,u=document.getElementsByClassName(`atkDiv${r}`),g=0,h=0,p=0,m=0,y=0;for(let r=0;r<u.length;r++)u[r].addEventListener("click",(function(r){if(!0===e.isActive&&(l=r.target.getAttribute("data-y-coord"),a=r.target.getAttribute("data-x-coord"),o=s.gameBoard[a][l].isShot,n=s.gameBoard[a][l].shipLength,d=s.gameBoard[a][l].shipType,!1===o)){if("true"===r.target.getAttribute("data-has-ship")?r.target.style.backgroundColor="red":r.target.style.backgroundColor="grey",console.log(a),console.log(l),s.receiveAttack(a,l),!0===s.allShipsSunk(c))return void console.log("Player won!");if(!0===e.board.allShipsSunk(e.ships))return void console.log("Computer won!");"Carrier"==d?(c.filter((e=>e.length==n))[0].hit(g),g+=1):"Battleship"==d?(c.filter((e=>e.length==n))[0].hit(h),h+=1):"Destroyer"==d?(c.filter((e=>e.length==n))[0].hit(p),p+=1):"Submarine"==d?(c.filter((e=>e.length==n))[1].hit(m),m+=1):"Patrolboat"==d&&(c.filter((e=>e.length==n))[0].hit(y),y+=1),e.toggle(),t.toggle();let o=e.enemyMove();console.log(o),i(e,t,o[0],o[1])}}))},i=(e,t,r,o)=>{let l,a=e.board,n=e.ships,d=a.gameBoard[r][o].isShot,s=a.gameBoard[r][o].hasShip,c=a.gameBoard[r][o].shipLength,u=a.gameBoard[r][o].shipType;l=0===r?o:""+r+o;let g=document.getElementsByClassName("atkDiv1")[l],h=0,p=0,m=0,y=0,f=0;if(!0===t.isActive)if(!1===d){if(g.style.backgroundColor=!0===s?"red":"grey",a.receiveAttack(r,o),!0===a.allShipsSunk(n))return void console.log("Computer won!");if(!0===t.board.allShipsSunk(t.ships))return void console.log("User won!");"Carrier"==u?(n.filter((e=>e.length==c))[0].hit(h),h+=1):"Battleship"==u?(n.filter((e=>e.length==c))[0].hit(p),p+=1):"Destroyer"==u?(n.filter((e=>e.length==c))[0].hit(m),m+=1):"Submarine"==u?(n.filter((e=>e.length==c))[1].hit(y),y+=1):"Patrolboat"==u&&(n.filter((e=>e.length==c))[0].hit(f),f+=1),e.toggle(),t.toggle()}else{let r=e.enemyMove();i(e,t,r[0],r[1])}};(()=>{const e=document.querySelector("#startBtn"),i=document.querySelector("#alignBtn"),l=document.querySelector("#Carrier"),a=document.querySelector("#Battleship"),n=document.querySelector("#Destroyer"),d=document.querySelector("#Submarine"),s=document.querySelector("#PatrolBoat");l.classList.add("horizontal"),a.classList.add("horizontal"),n.classList.add("horizontal"),d.classList.add("horizontal"),s.classList.add("horizontal"),l.style.flexDirection="row",l.setAttribute("data-alignment","row");const c=[t("player1",!0),t("computer",!1)],u=e=>{e.dataTransfer.setData("text/plain",e.target.id),e.currentTarget.style.backgroundColor="green"};l.addEventListener("dragstart",u),a.addEventListener("dragstart",u),n.addEventListener("dragstart",u),d.addEventListener("dragstart",u),s.addEventListener("dragstart",u),r(c[0].board.gameBoard,1),i.addEventListener("click",(function(){"row"===l.style.flexDirection?(l.style.flexDirection="column",a.style.flexDirection="column",n.style.flexDirection="column",d.style.flexDirection="column",s.style.flexDirection="column",l.setAttribute("data-alignment","column")):(l.style.flexDirection="row",a.style.flexDirection="row",n.style.flexDirection="row",d.style.flexDirection="row",s.style.flexDirection="row",l.setAttribute("data-alignment","row"))})),(e=>{const t=e=>{e.preventDefault()},r=t=>{t.preventDefault(),console.log(t.target.getAttribute("data-y-coord")),console.log(t.target.getAttribute("data-x-coord"));let r=parseInt(t.target.getAttribute("data-x-coord")),o=parseInt(t.target.getAttribute("data-y-coord")),i=t.dataTransfer.getData("text"),l=document.querySelector("#Carrier"),a=document.querySelector("#Battleship"),n=document.querySelector("#Destroyer"),d=document.querySelector("#Submarine"),s=document.querySelector("#PatrolBoat"),c=l.getAttribute("data-alignment");if(console.log(e),"Carrier"===i&&!1===e.scout(r,o,5,c)){if("row"===c){e.placeHorizontal(r,o,5,i);for(let e=0;e<5;e++)document.getElementById(`squareDiv${r}${o}`).style.backgroundColor="green",o++}else if("column"===c){e.placeVert(r,o,5,i);for(let e=0;e<5;e++)document.getElementById(`squareDiv${r}${o}`).style.backgroundColor="green",r++}l.style.display="none"}if("Battleship"===i&&!1===e.scout(r,o,4,c)){if("row"===c){e.placeHorizontal(r,o,4,i);for(let e=0;e<4;e++)document.getElementById(`squareDiv${r}${o}`).style.backgroundColor="green",o++}else if("column"===c){e.placeVert(r,o,4,i);for(let e=0;e<4;e++)document.getElementById(`squareDiv${r}${o}`).style.backgroundColor="green",r++}a.style.display="none"}if("Destroyer"===i&&!1===e.scout(r,o,3,c)){if("row"===c){e.placeHorizontal(r,o,3,i);for(let e=0;e<3;e++)document.getElementById(`squareDiv${r}${o}`).style.backgroundColor="green",o++}else if("column"===c){e.placeVert(r,o,3,i);for(let e=0;e<3;e++)document.getElementById(`squareDiv${r}${o}`).style.backgroundColor="green",r++}n.style.display="none"}if("Submarine"===i&&!1===e.scout(r,o,3,c)){if("row"===c){e.placeHorizontal(r,o,3,i);for(let e=0;e<3;e++)document.getElementById(`squareDiv${r}${o}`).style.backgroundColor="green",o++}else if("column"===c){e.placeVert(r,o,3,i);for(let e=0;e<3;e++)document.getElementById(`squareDiv${r}${o}`).style.backgroundColor="green",r++}d.style.display="none"}if("PatrolBoat"===i&&!1===e.scout(r,o,2,c)){if("row"===c){e.placeHorizontal(r,o,2,i);for(let e=0;e<2;e++)document.getElementById(`squareDiv${r}${o}`).style.backgroundColor="green",o++}else if("column"===c){e.placeVert(r,o,2,i);for(let e=0;e<2;e++)document.getElementById(`squareDiv${r}${o}`).style.backgroundColor="green",r++}s.style.display="none"}};let o=document.getElementsByClassName("atkDiv1");for(let e=0;e<o.length;e++)o[e].addEventListener("dragover",t),o[e].addEventListener("drop",r)})(c[0].board),e.addEventListener("click",(function(){(()=>{let e=document.querySelector("#container1");for(;e.firstChild;)e.removeChild(e.firstChild)})(),r(c[0].board.gameBoard,1),r(c[1].board.gameBoard,2),o(c[0],c[1],2),o(c[1],c[0],2)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,